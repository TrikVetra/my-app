{"version":3,"file":"static/js/502.fd394cc7.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Profile/MyPosts/MyPosts/MyPosts.module.css?8eb8","webpack://my-app/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPosts/MyPostsContainer.jsx","webpack://my-app/./src/components/Profile/ProfileInfo/Autor/Autor.module.css?e011","components/Profile/ProfileInfo/ProfileStatus/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/Autor/Autor.jsx","webpack://my-app/./src/components/Profile/ProfileInfo/ProfileHeader/ProfileHeader.module.css?4d2d","components/Profile/ProfileInfo/ProfileHeader/ProfileHeader.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"newPost\":\"MyPosts_newPost__5PPSd\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__K8Agm\"};","import classes from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    \r\n    return (\r\n\r\n        <div className='posts'>\r\n            <div className={classes.item}>\r\n                {props.message}\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Post;","import classes from './MyPosts.module.css';\r\nimport React from 'react';\r\nimport Post from '../Post/Post';\r\nimport { Field, reduxForm } from \"redux-form\"\r\nimport { required, maxLengthCreator } from '../../../../utils/validators/validators'\r\nimport { Textarea } from '../../../Common/FormsControls/FormsControls';\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst profileMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder={'сообщение'}\r\n                    name={'message'}\r\n                    component={Textarea}\r\n                    validate={[required, maxLength10]} />\r\n            </div>\r\n            <div>\r\n                <button type='submit'> Создать </button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst MessageReduxForm = reduxForm({ //контейнерная компонента для подключения Redux-form\r\n    form: 'profileMessage'\r\n})(profileMessageForm)\r\n\r\nconst NewPost = (props) => {\r\n\r\n    let postElement = props.postData.map(\r\n        post => <Post message={post.message} key={post.id} />\r\n    )\r\n\r\n    const onSubmit = (values) => {\r\n        props.addPost(values.message);\r\n    }\r\n\r\n    return (\r\n        <div className={classes.newPost}>\r\n            <div>\r\n                <MessageReduxForm onSubmit={onSubmit} />\r\n            </div>\r\n\r\n            <div>{postElement}</div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default NewPost;\r\n\r\n","//import React from 'react';\r\nimport {addPostActionCreator} from '../../../../redux/profileReducer';\r\nimport {connect} from 'react-redux';\r\nimport MyPosts from './MyPosts';\r\n\r\nlet mapStateToProps = (state) => { //Передаёт данные\r\n    return {\r\n        postData: state.profilePage.postData,\r\n        newPostText: state.profilePage.newPostText,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => { //Передаёт колбэки\r\n    return {\r\n        addPost: (message) => {\r\n            dispatch(addPostActionCreator(message));\r\n        },\r\n    }\r\n}\r\n\r\nconst NewPostContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default NewPostContainer;\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"autor\":\"Autor_autor__twNN0\",\"autor_description\":\"Autor_autor_description__70Gcs\"};","import React, { useEffect, useState } from \"react\"\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    // let stateWithSetState = useState(false); //useState - хук. Возвращает массив из 2 элементов\r\n    // let editMode = stateWithSetState[0]; //В первом элементе переданное значение (false)\r\n    // let setEditMode = stateWithSetState[1]; //Во втором функция, которая будет изменять первый элемент. Менять переменную напрямую нельзя, т.к она хранится где-то в глубинах реакта.\r\n    //С помощью деструктурированного присваивания это пишется так:\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    //Используется вместо componentDidUpdate/componentDidMount классовых компонент\r\n    useEffect( () => {\r\n        setStatus(props.status)\r\n    }, [props.status] ); //вызывается каждый раз, когда происходят какие-то изменения водном из элементов этого массива. Если массив не указать, то каждый раз когда перерисовывается jsx на странице. Если передать пустой массив, выполнится 1 раз при монтировании компоненты.\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => { \r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusCange = (e) => {      \r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    {/* Здесь статус показывается из пропсов потому что ещё не обновился. */}\r\n                    <span onDoubleClick={ activateEditMode }>{props.status || \"------\"}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    {/* Событие onBlur срабатывает когда уходит фокус из элемента\r\n                        Здесь статус показывается из state потому что мы его меняем. \r\n                        Если value зафиксировано, обязательно должен быть onChange иначе ничего не будет меняться.*/}\r\n                    <input onChange={ onStatusCange } autoFocus={true} value={status} onBlur={ deactivateEditMode }/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks","import classes from './Autor.module.css';\r\nimport userPhoto from '../../../../assets/img/monkey.png';\r\nimport Preloader from '../../../Common/Preloader/Preloader'\r\nimport ProfileStatusWithHooks from '../ProfileStatus/ProfileStatusWithHooks';\r\n\r\nconst Autor = (props) => {\r\n    if (!props.profile) { //Если данных ещё нет, грузим прелоадер.\r\n        return (<Preloader/>)\r\n    } else  return (  \r\n        <>\r\n        <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n        <div className={classes.autor}>\r\n            \r\n            <img alt='hear' src={props.profile.photos.large ? props.profile.photos.large: userPhoto}></img>\r\n            \r\n            <div className={classes.autor_description}>\r\n                <b>Имя:</b> {props.profile.fullName}<br></br>\r\n                <b>О себе:</b> {props.profile.aboutMe}<br></br>\r\n                <b>Ищещь работу?</b> {props.profile.fullName.lookingForAJob ? \"Да\" : \"Нет\"}<br></br>\r\n            </div>\r\n        </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Autor;","// extracted by mini-css-extract-plugin\nexport default {\"content_texture\":\"ProfileHeader_content_texture__RQMMI\"};","import classes from './ProfileHeader.module.css';\r\n\r\nconst ProfileHeader = () => {\r\n    return (\r\n        <div className={classes.content_texture}>\r\n            <img alt='texture' src='https://w-dog.ru/wallpapers/15/10/551748531899607/listya-kashtan-prozhilki-uzor.jpg'></img>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileHeader;","import Autor from \"./Autor/Autor\";\r\nimport ProfileHeader from \"./ProfileHeader/ProfileHeader\";\r\n\r\nconst ProfileInfo = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileHeader />\r\n            <Autor profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo","\r\nimport MyPostsContainer from './MyPosts/MyPosts/MyPostsContainer'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\r\n\r\n\r\nconst Profile = (props) => {  \r\n    return (\r\n        <div>            \r\n            <ProfileInfo profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}   \r\n                         auth={props.auth}/>\r\n            <MyPostsContainer />   \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;\r\n\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport Profile from \"./Profile\";\r\nimport {\r\n    setUserProfile,\r\n    getCurrentUserDataThunkCreator,\r\n    getStatusThunkCreator,\r\n    updateStatusThunkCreator\r\n} from \"../../redux/profileReducer\";\r\nimport { compose } from 'redux';\r\n\r\nimport { //В React6 вместо import withRouter нужно импортировать вот так, чтобы достать id текущего пользователя и прочее.\r\n    // useLocation,\r\n    // useNavigate,\r\n    useParams\r\n  } from \"react-router-dom\";  \r\n\r\nfunction withRouter(Component) {\r\n    function ComponentWithRouterProp(props) {\r\n\r\n        let params = useParams();\r\n        \r\n        return (\r\n            <Component\r\n                {...props}\r\n                router={{  params }}\r\n            />\r\n        );\r\n    }\r\n    return ComponentWithRouterProp;\r\n}\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    componentDidMount(){\r\n        let userId = this.props.router.params.userId; //Определяем id пользователя на который щелкнули на странице пользователей\r\n        \r\n        if (!userId){ //Если перешли с главной, подставляем id текущего авторизованного пользователя.                \r\n            userId=this.props.auth.id;\r\n            //if (!userId) this.props.history.push(\"/profile\")\r\n        }\r\n        this.props.getCurrentUserDataThunkCreator(userId)  \r\n        this.props.getStatusThunkCreator(userId)        \r\n    }    \r\n\r\n    render() {\r\n        \r\n        return (\r\n            <Profile {...this.props} profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatusThunkCreator}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {    \r\n    return {\r\n       profile: state.profilePage.profile, \r\n       status: state.profilePage.status,\r\n       auth: state.auth,\r\n    }\r\n}\r\n\r\nexport default \r\ncompose (\r\n    connect(mapStateToProps,\r\n        {\r\n            setUserProfile,\r\n            getCurrentUserDataThunkCreator,\r\n            getStatusThunkCreator,\r\n            updateStatusThunkCreator,\r\n        }),\r\n    withRouter,\r\n    //withAuthRedirect,\r\n)(ProfileContainer)\r\n"],"names":["props","className","classes","message","maxLength10","maxLengthCreator","MessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","name","component","Textarea","validate","required","type","postElement","postData","map","post","id","values","addPost","connect","state","profilePage","newPostText","dispatch","addPostActionCreator","MyPosts","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","profile","alt","src","photos","large","userPhoto","fullName","aboutMe","lookingForAJob","Preloader","auth","MyPostsContainer","ProfileContainer","userId","this","router","params","getCurrentUserDataThunkCreator","getStatusThunkCreator","updateStatusThunkCreator","React","compose","setUserProfile","Component","useParams"],"sourceRoot":""}