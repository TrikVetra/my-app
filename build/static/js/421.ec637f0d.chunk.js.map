{"version":3,"file":"static/js/421.ec637f0d.chunk.js","mappings":"0KACA,EAA0B,yBAA1B,EAAkE,8BAAlE,EAAyG,wBAAzG,EAA6K,0BAA7K,EAAiN,yB,SCejN,EAbmB,SAACA,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OAEI,gBAAKC,UAAWC,EAAhB,UACI,UAAC,KAAD,CAASC,GAAIJ,EAAb,cAAqBD,EAAMM,KAA3B,UCDZ,EANoB,SAACN,GACjB,OACI,iBAAKG,UAAWC,EAAhB,cAAmCJ,EAAMO,QAAzC,Q,iDCKFC,GAAcC,EAAAA,EAAAA,GAAiB,IAmB/BC,GAAkBC,EAAAA,EAAAA,GAAU,CAC9BC,KAAM,iBADcD,EAjBE,SAACX,GACvB,OACI,kBAAMa,SAAUb,EAAMc,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CAAOC,YAAa,yDAChBV,KAAM,UACNW,UAAWC,EAAAA,GACXC,KAAM,OACNC,SAAU,CAACC,EAAAA,EAAUb,QAE7B,0BACI,mBAAQW,KAAK,SAAb,kEA2ChB,EAjCgB,SAACnB,GAGb,IAAIsB,EAAQtB,EAAMuB,YAEdC,EAAkBF,EAAMG,YAAYC,KACpC,SAAAC,GAAM,OAAI,SAAC,EAAD,CAAYzB,GAAIyB,EAAOzB,GAAII,KAAMqB,EAAOrB,MAAWqB,EAAOzB,OAGpE0B,EAAmBN,EAAMO,aAAaH,KACtC,SAAAI,GAAQ,OAAI,SAAC,EAAD,CAAa5B,GAAI4B,EAAS5B,GAAIK,QAASuB,EAASvB,SAAcuB,EAAS5B,OAOvF,OACI,iBAAKC,UAAWC,EAAhB,WAEI,gBAAKD,UAAWC,EAAhB,SACKoB,KAGL,iBAAKrB,UAAWC,EAAhB,WACI,yBAAMwB,KACN,SAAClB,EAAD,CAAiBG,SAbP,SAACkB,GACnB/B,EAAMgC,WAAWD,EAAOxB,mB,oEC1C5B0B,EAA6B,SAACX,GAC9B,MAAO,CACJY,OAAQZ,EAAMa,KAAKD,SCgB1B,GAEAE,E,QAAAA,KACIC,EAAAA,EAAAA,KAnBkB,SAACf,GAEvB,MAAM,CACFC,YAAaD,EAAMC,gBAIE,SAACe,GAE1B,MAAO,CACHN,WAAY,SAACzB,GACT+B,GAAUC,EAAAA,EAAAA,GAAwBhC,UDPV,SAACiC,GAAe,IAEtCC,EAFqC,0IAGvC,WACI,OAAKC,KAAK1C,MAAMkC,QACT,SAACM,GAAD,UAAeE,KAAK1C,SADI,SAAC,KAAD,CAAUK,GAAG,eAJT,GAEXsC,EAAAA,WAShC,OAFqCN,EAAAA,EAAAA,IAASJ,EAATI,CAAqCI,KCG9E,CAKMG","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/MessageItem/MessageItem.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.jsx","components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Dialogs\":\"Dialogs_Dialogs__2qKiq\",\"Dialog_items\":\"Dialogs_Dialog_items__oDzw+\",\"Dialog\":\"Dialogs_Dialog__aVbVf\",\"active\":\"Dialogs_active__cKchY\",\"Messages\":\"Dialogs_Messages__XCsXm\",\"Message\":\"Dialogs_Message__x2EPU\"};","import { NavLink } from 'react-router-dom';\r\nimport classes from '../Dialogs.module.css'\r\n\r\nconst DialogItem = (props) => {\r\n    let path = '/dialogs/' + props.id;\r\n\r\n    return (\r\n\r\n        <div className={classes.Dialog}>\r\n            <NavLink to={path}> {props.name} </NavLink>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\n\r\nexport default DialogItem;\r\n\r\n\r\n ","import classes from '../Dialogs.module.css'\r\n\r\nconst MessageItem = (props) => {\r\n    return (\r\n        <div className={classes.Message}> {props.message} </div>\r\n    )\r\n}\r\n\r\nexport default MessageItem","import DialogItem from \"./DialogItem/DialogItem\"\r\nimport classes from './Dialogs.module.css'\r\nimport MessageItem from './MessageItem/MessageItem'\r\nimport React from 'react'\r\n\r\nimport { Field, reduxForm } from \"redux-form\"\r\nimport { Textarea } from \"../Common/FormsControls/FormsControls\"\r\nimport { required, maxLengthCreator } from '../../utils/validators/validators'\r\n\r\nconst maxLength15 = maxLengthCreator(15);\r\n\r\nconst dialogMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder={'сообщение'}\r\n                    name={'message'}\r\n                    component={Textarea}\r\n                    type={'text'}\r\n                    validate={[required, maxLength15]} />\r\n            </div>\r\n            <div>\r\n                <button type='submit'> Создать </button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst DialogReduxForm = reduxForm({ //контейнерная компонента для подключения Redux-form\r\n    form: 'dialogMessage'\r\n})(dialogMessageForm)\r\n\r\nconst Dialogs = (props) => {\r\n\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogsData.map(\r\n        dialog => <DialogItem id={dialog.id} name={dialog.name} key={dialog.id} />\r\n    )\r\n\r\n    let messagesElements = state.messagesData.map(\r\n        messages => <MessageItem id={messages.id} message={messages.message} key={messages.id} />\r\n    )\r\n\r\n    const addNewMessage = (values) => {\r\n        props.addMessage(values.message);\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Dialogs}>\r\n\r\n            <div className={classes.Dialog_items}>\r\n                {dialogsElements}\r\n            </div>\r\n\r\n            <div className={classes.Messages}>\r\n                <div>{messagesElements}</div>\r\n                <DialogReduxForm onSubmit={addNewMessage} />\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Dialogs;","import React from \"react\"\r\nimport { Navigate } from \"react-router-dom\"\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => {    \r\n    return {\r\n       isAuth: state.auth.isAuth,       \r\n    }\r\n}\r\n\r\nexport const withAuthRedirect = (Component) => { \r\n\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Navigate to=\"/login\" />\r\n            return <Component {...this.props}/>\r\n        }        \r\n    }    \r\n    \r\n    let ConnectedAuthRedirectComponent = connect (mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n","import {addMessageActionCreator} from '../../redux/dialogReducer'\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from 'react-redux';\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\"\r\nimport { compose } from 'redux';\r\n\r\nlet mapStateToProps = (state) => { //Передаёт данные\r\n    \r\nreturn{\r\n    dialogsPage: state.dialogsPage,\r\n}\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => { //Передаёт колбэки\r\n\r\nreturn {\r\n    addMessage: (message) => {\r\n        dispatch( addMessageActionCreator(message) );\r\n    },\r\n}\r\n}\r\n\r\nexport default \r\n//По сути \"оборачивает вызовы в конвейер\". Взять последнюю (Dialogs), передать в параметр предыдущей, повторить.\r\ncompose(\r\n    connect(mapStateToProps,mapDispatchToProps),\r\n    withAuthRedirect,\r\n    )(Dialogs)"],"names":["props","path","id","className","classes","to","name","message","maxLength15","maxLengthCreator","DialogReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Textarea","type","validate","required","state","dialogsPage","dialogsElements","dialogsData","map","dialog","messagesElements","messagesData","messages","values","addMessage","mapStateToPropsForRedirect","isAuth","auth","compose","connect","dispatch","addMessageActionCreator","Component","RedirectComponent","this","React","Dialogs"],"sourceRoot":""}